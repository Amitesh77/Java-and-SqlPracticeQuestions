4) Given a method with a positive number as input.write a code to
calculate the sum of squares of individual digiths of given
number.Return it as output.
Example:
Input=321
output=(3*2+2*2+1*1)=14
public class D {
/**
* @param args
*/
public static void main(String[] args) {
int n=141;
getvalues(n);
}
public static void getvalues(int n) {
int a=n;
int rem=0;
int sum=0;
while(a!=0)
{
rem=a%10;
sum=sum+(rem*rem);
a=a/10;
}
System.out.println(sum);
}
}
.........................................................................................................

21) Given a method calulateNcr().Write cod to calulate the ways in which r elements can be selected from n population,using nCr formulanCr=n!r!(n-r)! where first input begin n and 
second input being r.
Note:n!factorial can be achieved using given formila n!=nx(n-1)x(n-2)x...3x2x1.
Note2:0!=1.
Examplle 5!=5x4x3x2x1=120
package com.Packas;
public class B {
public static void main(String[] args) {
int n=5;
int r=3;
getvalues(n,r);
}
public static void getvalues(int n, int r) {
int fact=1,fact1=1,fact2=1;
for(int i=1;i<=n;i++)
{
fact=fact*i;
}
System.out.println(fact);
for(int i=1;i<=r;i++)
{
fact1=fact1*i;
}


System.out.println(fact1);
for(int i=1;i<=(n-r);i++)
{
fact2=fact2*i;
}
System.out.println(fact2);
int res=fact/(fact1*fact2);
System.out.println(res);
}
}
...............................................................................

31) Given a method taking an odd positive integer number as input. Write code to evaluate the following series.
1+3-5+7-9...+/-n.
Example:
Input=9
series= 1+3-5+7-9
output= -3
package com.Packas;
import java.util.Scanner;
public class A {
public static void main(String[] args)
{
Scanner sc=new Scanner(System.in);
int n=sc.nextInt();
getvalues(n);
}
public static void getvalues(int n)
{
int j=0;
int a[]=new int[10];
int sump=1,sumn=0;
for(int i=0;i<=n;i++)
{
if(i%2!=0)
{
a[j]=i;
j++;
}
}
for(int l=0;l<a.length;l++)
{
System.out.print(a[l]+" ");
}
for(int k=1;k<n;k+=2)
{
sump = sump+a[k];
sumn=sumn+a[k+1];
}
int diff=0;
diff=sump-sumn;
System.out.println();
System.out.println(diff);
}
}
........................................................................


32) Given a method with a positive number as input. Write code to calculate the sum of digits at even indexes (say evenSum) and sum of digits at odd indexes (say oddSum). 
In the given number if both the sums are equal return 1 as output else return -1.
Example:
input= 23050
evenSum=2+0+0= 2
oddSum= 3+5=8
outrput=-1
import java.util.Scanner;
public class A {
public static void main(String[] args) {
Scanner sc = new Scanner(System.in);
int n = sc.nextInt();
getvalues(n);
}
public static void getvalues(int n) {
int rem = 0, i = 0;
int a[] = new int[10];
while (n > 0) {
rem = n % 10;
a[i] = rem;
n = n / 10;
i++;
}
int sume = 0, sumo = 0;
for (int j = i - 1; j >= 0; j -= 2) {
sumo = sumo + a[j];
}
for (int j = i - 2; j >= 0; j -= 2) {
sume = sume + a[j];
}
if (sume == sumo) {
System.out.println(1);
} else
System.out.println(-1);
}
}
...........................................................................................................................

35) Given a method addPalindrome()with two inputs of type int.first input being the lower limit and second input being the higher limit of a range of postive integers.
Write a code to calulate the sum of all palindrome numbers in this range including the two numbers.
if there is no any palindrome number in the given range,return0.
Note1:A palindrome number is a number which remains same after reversing its digits.
Note2:A single digit number is not considerd as palindrome.
Example:
input1:130
input2:150
output:131+141=272
package com.Packas;
public class B {
public static void main(String[] args) {
int n1=130;
int n2=150;
getvalues(n1,n2);
}
public static void getvalues(int n1, int n2) {
int rem=0,rev,sum = 0;
for(int i=n1;i<=n2;i++)
{
rev=0;
int a=i;
while(a!=0)
{
rem=a%10;
rev=rev*10+rem;
a=a/10;
}
if(rev==i)
{
sum=sum+i;
}
}
System.out.println(sum);
}
}
...............................................................................................

1. A number is given as input. Find the odd digits in the number, add them and find if the sum is odd or not.if even return -1, if odd return 1
input:52315
logic:5+3+1+5=14(even)
output:-1
input:1112
logic:1+1+1=3(odd)
output:1
package Set1;
public class ClassSet1 {
public static int SumOfOddsAndEvens(int n){
int n1,n2=0,n3;
while(n!=0)
{
n1=n%10;
if((n1%2)!=0)
n2+=n1;
n/=10;
}
if(n2%2==0)
n3=-1;
else
n3=1;
return n3;
}
public static void main(String[] args) {
int n=12346;
System.out.println(SumOfOddsAndEvens(n));
}
}

---------------------------------------------------------------------------------------------------------------------------------

6. Sum of fibonaaci series upto given input.
input:3
logic:1+1+2
output:4
package Set1;
import java.util.*;
public class ClassSet6 {
public static int sumOfFibonacci(int n){
int a=-1,b=1,c=0,d=0;
for(int i=0;i<=n;i++){
c=a+b;
a=b; b=c;
d+=c;
}
return d;
}
public static void main(String[] args) {
Scanner s=new Scanner(System.in);
int n=s.nextInt();
System.out.println(sumOfFibonacci(n));
}
}


---------------------------------------------------------------------------------------------------------------------------------------

5) Square root calculation of
((x1+x2)*(x1+x2))+((y1+y2)*(y1+y2))
o/p should be rounded of to int;
package Set3;
public class ClassSeT05 {
public static void main(String[] args) {
int x1=4,x2=8;
int y1=3,y2=5;
sqrt(x1,x2,y1,y2);
}
public static void sqrt(int x1, int x2, int y1, int y2) {
int op;
op=(int) (Math.sqrt((x1+x2)*(x1+x2))+((y1+y2)*(y1+y2)));
System.out.println(op);
}
}
----------------------------------------------------------------------------------------------------||


19) input---input1=1;
input2=4;
input3=1;
output1=4;
operation--- print the element which is not repeated
if all the inputs r different sum all inputs
input---input1=1;
input2=2;
input3=3;
output1=6;
package Set3;
public class ClassSeT19 {
public static void main(String[] args) {
int ip1=1,ip2=4,ip3=1;
//int ip1=1,ip2=2,ip3=3;
//int ip1=1,ip2=1,ip3=1;
System.out.println(sumOfNonRepeatedChars(ip1,ip2,ip3));
}
public static int sumOfNonRepeatedChars(int ip1, int ip2, int ip3){
int n=0;
if(ip1!=ip2 && ip2!=ip3 && ip3!=ip1)
n=ip1+ip2+ip3;
else if(ip1==ip2 && ip2==ip3)
n=0;
else{
if(ip1==ip2)
n=ip3;
else if(ip1==ip3)
n=ip2;
else if(ip2==ip3)
n=ip1; }
return n;
}
}
----------------------------------------------------------------------------------------------------||

38) input1={2,4,3,5,6};
if odd find square
if even find cube
finally add it
output1=208(4+16+27+125+36)
package Set3;
public class ClassSeT38 {
public static void main(String[] args) {
int a[]={2,4,3,5,6};
System.out.println(summationPattern(a));
}
public static int summationPattern(int[] a) {
int n1=0,n2=0;
for(int i=0;i<a.length;i++)
if(a[i]%2==0)
n1+=(a[i]*a[i]);
else
n2+=(a[i]*a[i]*a[i]);
return n1+n2;
}
}
----------------------------------------------------------------------------------------------------||

47) Add elements of digits:9999
output:9+9+9+9=3+6=9;
package Set3;
public class ClassSeT47 {
public static void main(String[] args) {
int n=9999;
System.out.println(conversiontoaSingleDigit(n));
}
public static int conversiontoaSingleDigit(int n){
loop:
while(n>10){
int l=0,m=0;
while(n!=0){
m=n%10;
l=l+m;
n=n/10; }
n=l;
continue loop; }
return n;
}
}
----------------------------------------------------------------------------------------------------||

49) perfect no or not?
package Set3;
public class ClassSeT49 {
public static void main(String[] args) {
int n=28;
System.out.println(perfectNumber(n));
}
public static boolean perfectNumber(int n) {
int n1=0;
boolean b=false;
for(int i=1;i<n;i++)
if(n%i==0)
n1+=i;
//System.out.println(n1);
if(n1==n)
b=true;
return b;
}
}
----------------------------------------------------------------------------------------------------||


